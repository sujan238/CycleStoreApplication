// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserAuthApiPg.Data;

#nullable disable

namespace UserAuthApiPg.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20250314063035_AddSizeToCycle")]
    partial class AddSizeToCycle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserAuthApiPg.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerNotes")
                        .HasColumnType("text");

                    b.Property<long>("CustomerPhone")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CustomerZip")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.Cycle", b =>
                {
                    b.Property<int>("CycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CycleId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("DeliveryCharges")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsCustomizable")
                        .HasColumnType("boolean");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("CycleId");

                    b.HasIndex("BrandId");

                    b.HasIndex("TypeId");

                    b.ToTable("Cycles");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.CycleBrand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("BrandId");

                    b.ToTable("CycleBrands");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.CycleType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("TypeId");

                    b.ToTable("CycleTypes");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.DeliveryProof", b =>
                {
                    b.Property<int>("ProofId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProofId"));

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("ProofUrl")
                        .HasColumnType("text");

                    b.Property<int>("ShippingId")
                        .HasColumnType("integer");

                    b.HasKey("ProofId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShippingId")
                        .IsUnique();

                    b.ToTable("DeliveryProofs");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.EmployeeLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("HoursWorked")
                        .HasColumnType("numeric");

                    b.Property<int>("SalesCount")
                        .HasColumnType("integer");

                    b.HasKey("LogId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeLogs");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.FinancialReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReportId"));

                    b.Property<string>("FileUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalSales")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ReportId");

                    b.ToTable("FinancialReports");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryId"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int>("CycleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastRestockDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("StoreLocation")
                        .HasColumnType("text");

                    b.HasKey("InventoryId");

                    b.HasIndex("CycleId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderDetailId"));

                    b.Property<string>("CustomColor")
                        .HasColumnType("text");

                    b.Property<int>("CycleId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("CycleId");

                    b.HasIndex("TransactionId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsRefunded")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentGatewayId")
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("integer");

                    b.HasKey("PaymentId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CycleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.HasIndex("CycleId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.ReturnRequest", b =>
                {
                    b.Property<int>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReturnId"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TransactionId")
                        .HasColumnType("integer");

                    b.HasKey("ReturnId");

                    b.HasIndex("TransactionId");

                    b.ToTable("ReturnRequests");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.ShippingDetails", b =>
                {
                    b.Property<int>("ShippingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShippingId"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("DeliveryCharges")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeliveryEmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatusHistory")
                        .HasColumnType("text");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("text");

                    b.Property<int>("TransactionId")
                        .HasColumnType("integer");

                    b.Property<string>("TransportMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ShippingId");

                    b.HasIndex("DeliveryEmployeeId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("ShippingDetails");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("CancellationFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("InvoiceUrls")
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("WarrantyExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TransactionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.Cycle", b =>
                {
                    b.HasOne("UserAuthApiPg.Models.CycleBrand", "Brand")
                        .WithMany("Cycles")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserAuthApiPg.Models.CycleType", "Type")
                        .WithMany("Cycles")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.DeliveryProof", b =>
                {
                    b.HasOne("UserAuthApiPg.Models.User", "Employee")
                        .WithMany("DeliveryProofs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserAuthApiPg.Models.ShippingDetails", "ShippingDetails")
                        .WithOne()
                        .HasForeignKey("UserAuthApiPg.Models.DeliveryProof", "ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserAuthApiPg.Models.Transaction", null)
                        .WithOne("DeliveryProof")
                        .HasForeignKey("UserAuthApiPg.Models.DeliveryProof", "ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ShippingDetails");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.EmployeeLog", b =>
                {
                    b.HasOne("UserAuthApiPg.Models.User", "Employee")
                        .WithMany("EmployeeLogs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.Inventory", b =>
                {
                    b.HasOne("UserAuthApiPg.Models.Cycle", "Cycle")
                        .WithMany("Inventories")
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cycle");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.OrderDetail", b =>
                {
                    b.HasOne("UserAuthApiPg.Models.Cycle", "Cycle")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserAuthApiPg.Models.Transaction", "Transaction")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cycle");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.Payment", b =>
                {
                    b.HasOne("UserAuthApiPg.Models.Transaction", "Transaction")
                        .WithMany("Payments")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.PurchaseOrder", b =>
                {
                    b.HasOne("UserAuthApiPg.Models.Cycle", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cycle");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.ReturnRequest", b =>
                {
                    b.HasOne("UserAuthApiPg.Models.Transaction", "Transaction")
                        .WithMany("ReturnRequests")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.Session", b =>
                {
                    b.HasOne("UserAuthApiPg.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.ShippingDetails", b =>
                {
                    b.HasOne("UserAuthApiPg.Models.User", "DeliveryEmployee")
                        .WithMany()
                        .HasForeignKey("DeliveryEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserAuthApiPg.Models.Transaction", "Transaction")
                        .WithOne("ShippingDetails")
                        .HasForeignKey("UserAuthApiPg.Models.ShippingDetails", "TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryEmployee");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.Transaction", b =>
                {
                    b.HasOne("UserAuthApiPg.Models.Customer", "Customer")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserAuthApiPg.Models.User", "Employee")
                        .WithMany("Transactions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.Customer", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.Cycle", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.CycleBrand", b =>
                {
                    b.Navigation("Cycles");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.CycleType", b =>
                {
                    b.Navigation("Cycles");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.Transaction", b =>
                {
                    b.Navigation("DeliveryProof");

                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");

                    b.Navigation("ReturnRequests");

                    b.Navigation("ShippingDetails");
                });

            modelBuilder.Entity("UserAuthApiPg.Models.User", b =>
                {
                    b.Navigation("DeliveryProofs");

                    b.Navigation("EmployeeLogs");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
